npm init -y   --> init npm package

npm i express mongoose   --> the express framework to the backend and the connection module mongoose

generate a basic server with express

-------------Dockerfile------------

FROM node:10.19.0  --> intall the x vesion

RUN mkdir -p /usr/src/app   --> it run a mkdir to create a app folder into the src folder, if src doesnt exist, -p will create it.

WORKDIR /usr/src/app      -->  we move to the new folder created

COPY package*.json ./     --> in order to create the dependences again, we copy the package.json and package-lock.json (we use package*.json to add all package----.json file)

RUN npm install         --> after copy de package files, we run the npm install to create  and install all the modules

COPY  .  .        --> we copy all the others files  beyond  the npm files and create a ---------.dockerignore-------- to ignore files like node_modules

EXPOSE 3000      --> especify the internal port wich will works in the container


CMD ["npm", "Start"]    --> it runs the script to initialice the node server

*  CMD ["npm", "run", "dev" ]   --> if you use nodemon in the container for constant refresh, install nodemon and add the dev script in package.json and modify the RUN command into the dockerfile file.

---------------Docker build----------

sudo docker build -t dockernodemongo .  --> sudo for the permission, -t to rename the image and the dot is because we have to give docker the path we are working about, te dot means that wue are working in te console path we are staying on

docker images   --> To see  the new img of the proyect created


-------docker run img---------------

docker run -p 4000:3000 dockernodemongo    --> it runs the proyect  creating a docker container with internal container 3000 port and the external in 4000

docker stop $id   --> to stop it stop the container process ID (docker ps)



--------docker-compose.yml-------    --> to compose severals images

version:"3"   --> specify the version of the compose file

services:                             -->img / containers to create
   
   
    webvolumes:                                --> first img called for example "web"
        container_name: exampleapp         -> the name of the container generated by the image
        restart: always                    -> in error case or other problem, the program will restart always
        build: .                           -> the path to the dockerfile (with . we are showing docker te folder where the dockerfile is, it will find the file automaticaly)
        ports:                             -> the in/out (EXPOSE) port of the dockerfile (the proyect)
            - "5000:3000"
        links:                                  ---> this is where we bind these two images, the firs image is composed with the secondo.
            - databasemg
        volumes:
            - .:/usr/src/app                    ---> with volumes, we modify the pc folder (the dot . means the path where the proyect is in the pc) of the proyect and the usr/src/app folder will modify too.

    databasemg:                         --> second img created
        container_name: mymongodb          -> the name of the second container
        image: mongo                        -> the img that the container is based
        ports:                             -> the in/out (EXPOSE) of mongo (by default mongo works at the 27017 port as native) 
            - "27018:27017"
        logging:
            driver: none              --> it means that the mongo console messages will not showed in the console any more. It helps to keep a clean bash.
            


Its critical mantain the code right tabulated!!!!!!!


-------------binding mongoose with docker--------------

mongoose.connect('mongodb://mongo/mydatabase')   --> in database.js we make up the connection using the next direction 'mongodb://mongo/mydatabase'  this direcction point the docker mongo service container


-------------Docker-compose-----------
install docker compose 


build-compose build              --> initial the compose build and generate a new image

docker-compose up                --> it iniciate the services


----------connecting to the container-----------------

docker ps               --> to know the ID of the container we want to connect, we can use eather the ID or the name


docker exect -it  $id  bash   --> this will initialice the container's bash wher it will be able to check the new directories just created

